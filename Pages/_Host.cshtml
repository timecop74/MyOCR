@page "/"
@namespace MyOCR.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MyOCR</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="MyOCR.styles.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script type="text/javascript">
        var dot = null;
        var scX = 1;
        var scY = 1;
        var mainSc = 1;

        function myDrawImg() {
            //ResizeCanvas();
            var src = document.getElementById('source');
            var at = src.attributes.src;
            src.removeAttribute.src;
            src.attributes.src = at;
            var canvas = document.getElementById("canvas");
            canvas.width = src.width * mainSc;
            canvas.height = src.height * mainSc;
            var context = canvas.getContext("2d");
            context.clearRect(0, 0, canvas.width, canvas.height);
            var image = document.getElementById('source');
            context.drawImage(image, 0, 0, src.width, src.height, 0, 0, src.width * mainSc, src.height * mainSc);
        };
        function ResizeCanvas() {
            var src = document.getElementById('source');
            var wt = src.width;
            var ht = src.height;
            var canvas = document.getElementById("canvas");
            canvas.width = wt;
            canvas.height = ht;
        };
        function FitToScreen(dotNetInstance) {
            if (mainSc != 1) {
                mainSc = 1
                myDrawImg();
                var src = document.getElementById('source');
                if (dot != null) dot.invokeMethodAsync('OnFitToSc', "" + mainSc, "" + src.width, "" + src.height);
            }
            else {
                var src = document.getElementById('source');
                var wt = src.width;
                var factor = src.height / src.width;
                scX = 700 / src.width;
                var ht = src.height;
                scY = (900 / src.height);
                if (scX > scY) mainSc = scY;
                else mainSc = scX;
                dot = dotNetInstance;
                if (dot != null) dot.invokeMethodAsync('OnFitToSc', "" + mainSc, "" + src.width,"" + src.height);
                myDrawImg();
            }
        };

        function myDrawRect(x, y, width, height,color) {
            var canvas = document.getElementById("canvas");
            var context = canvas.getContext("2d");
            context.strokeStyle = color;
            context.strokeRect(x * mainSc, y * mainSc, width * mainSc, height * mainSc);
            context.strokeRect((x + width - 2) * mainSc, (y + height - 2) * mainSc, 2, 2);
            context.strokeRect((x + width - 3) * mainSc, (y + height - 3) * mainSc, 3, 3);
        };
        function getsize(dotNetInstance) {
            var src = document.getElementById('source');
            dot = dotNetInstance;
            dotNetInstance.invokeMethodAsync('UpdateMessageCaller', ""+src.width, ""+src.height);
        };
        document.addEventListener('keydown', function (event) {
            if (dot != null && (event.code == "Delete" || event.code =="NumpadAdd")) dot.invokeMethodAsync('OnKeyPress', event.code);
            }
        );
    </script>

</body>
</html>
